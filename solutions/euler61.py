#!/usr/bin/python

###############################################################################
#
# Project Euler Problem 61
# found online at projecteuler.net/problem=61
# Solution by Timothy Reasa
#
###############################################################################

from itertools import permutations

target = 500
description = \
'Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal\n' + \
'numbers are all figurate (polygonal) numbers and are generated by the\n' + \
'following formulae:\n\n' + \
'\tTriangle\tP_3,n=n(n+1)/2\n' + \
'\tSquare\tP_4,n=n^2\n' + \
'\tPentagonal\tP_5,n=n(3n-1)/2\n' + \
'\tHexagonal\tP_6,n=n(2n-1)\n' + \
'\tHeptagonal\tP_7,n=n(5n-3)/2\n' + \
'\tOctagonal\tP_8,n=n(3n-2)\n\n' + \
'The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three\n' + \
'interesting properties.\n\n' + \
'1. The set is cyclic, in that the last two digits of each number is the\n' + \
'first two digits of the next number (including the last number with\n' + \
'the first).\n\n' + \
'2. Each polygonal type: triangle (P_3,127=8128), square (P_4,91=8281),\n' + \
'and pentagonal (P_5,44=2882), is represented by a different number in\n' + \
'the set.\n\n' + \
'3. This is the only set of 4-digit numbers with this property.\n\n' + \
'Find the sum of the only ordered set of six cyclic 4-digit numbers for\n' + \
'which each polygonal type: triangle, square, pentagonal, hexagonal,\n' + \
'heptagonal, and octagonal, is represented by a different number in the\n' + \
'set.\n'

def display(self):
    return description

def createCandidates(func):
    l = []
    i = 2
    temp = 1
    while temp < 10000:
	temp = func(i)
	if temp >= 1000:
	    l.append(temp)
	i += 1
    return l

def rotate(candidates,x):
    working = []
    end = x % 100
    for c in candidates:
	if c // 100 == end:
	    working.append(c)
    return working

def rotateMatch(y,x):
    return x % 100 == y // 100

def solve(self):

    tri = createCandidates(lambda x: x*(x+1) // 2)
    sqr = createCandidates(lambda x: x*x)
    pent = createCandidates(lambda x: x*(3*x-1) // 2)
    hexa = createCandidates(lambda x: x*(2*x-1))
    hept = createCandidates(lambda x: x*(5*x-3) // 2)
    octa = createCandidates(lambda x: x*(3*x-2))

    # check all orderings of polygonal numbers
    polygonal = [hept, hexa, pent, sqr, tri]
    for p in permutations(polygonal):

        for a in octa:		# cyclic, so we must pick a starting point
	    filtered1 = rotate(p[0],a)	# and permute the rest
	    for b in filtered1:
	        filtered2 = rotate(p[1],b)
	        for c in filtered2:
		    filtered3 = rotate(p[2],c)
		    for d in filtered3:
		        filtered4 = rotate(p[3],d)
		        for e in filtered4:
			    filtered5 = rotate(p[4],e)
			    for f in filtered5:
			        if rotateMatch(a,f):
				    return a+b+c+d+e+f



###############################################################################
# 
# If executed as a script/not imported
#
###############################################################################
if __name__ == '__main__':
    print solve(None)
