#!/usr/bin/python

###############################################################################
#
# Project Euler Problem 42
# found online at projecteuler.net/problem=42
#
###############################################################################

from __future__ import division
from math import sqrt

lowerTri = 285
lowerPent = 165
lowerHex = 143
description = \
'Triangle, pentagonal, and hexagonal numbers are generated by the\n' + \
'following formulae:\n\n' + \
'\tTriangle\tT_n=n(n+1)/2\t1, 3, 6, 10, 15, ...\n' + \
'\tPentagonal\tP_n=n(3n1)/2\t1, 5, 12, 22, 35, ...\n' + \
'\tHexagonal\tH_n=n(2n1)\t1, 6, 15, 28, 45, ...\n\n' + \
'It can be verified that T_285 = P_165 = H_143 = 40755.\n\n' + \
'Find the next triangle number that is also pentagonal and hexagonal.\n'

def display(self):
    return description

###############################################################################
#
# Naive solution by Timothy Reasa
#
# def solve(self):
#     iTri = lowerTri + 1
#     iPent = lowerPent + 1
#     iHex = lowerHex + 1
#     while True:
# 	triangle = iTri * (iTri+1) // 2
# 	pentagonal = iPent * (3*iPent-1) // 2
# 	hexagonal = iHex * (2*iHex-1)
# 	if triangle == pentagonal and triangle == hexagonal:
# 	    break
# 	if triangle < pentagonal or triangle < hexagonal:
# 	    iTri += 1
# 	if pentagonal < triangle or pentagonal < hexagonal:
# 	    iPent += 1
# 	if hexagonal < pentagonal or hexagonal < triangle:
# 	    iHex += 1
# 
#     return triangle
#
###############################################################################

###############################################################################
#
# Optimized solution based on realizations by bishwa and euler
#
# Key realizations:
# All hexagonal numbers are triangle numbers.
# If n = (1+sqrt(1+24P))/6 is an integer, then P is a pentagonal number
# 
###############################################################################

def solve(self):
    iHex = lowerHex
    while True:
	iHex += 1
	P = iHex * (2*iHex-1)
	n = (1+sqrt(1+24*P))/6
	if n == int(n):
	    break

    return P

###############################################################################
# 
# If executed as a script/not imported
#
###############################################################################
if __name__ == '__main__':
    print solve(None)
