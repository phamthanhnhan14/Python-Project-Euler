#!/usr/bin/python

###############################################################################
#
# Project Euler Problem 2
# found online at projecteuler.net/problem=2
#
###############################################################################

maxFib = 4000000
description = \
'Each new term in the Fibonacci sequence is generated by adding the\n' + \
'previous two terms. By starting with 1 and 2, the first 10 terms will be:\n'\
+ '\n\t1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\n' + \
'By considering the terms in the Fibonacci sequence whose values do not\n' + \
'exceed four million, find the sum of the even-valued terms.\n'

def display(self):
    return description


###############################################################################
#
# Naive solution by Timothy Reasa
#
# def solve(self):
#     sum = 2
#     fib1 = 2
#     fib2 = 1
#     while fib1 < maxFib:
#         next = fib1 + fib2
#         if next % 2 == 0:
# 	    sum += next
#         fib2 = fib1
#         fib1 = next
# 
#     return sum
#
###############################################################################

###############################################################################
#
# Optimized solution based on pseudocode from hk
#
# Key observation:
# Every third Fibonacci number is even.  Every third Fibonacci number can be
# calculated by the relation E(n) = 4*E(n-1)+E(n-2)
#
###############################################################################

def solve(self):
    total = 2
    fib1 = 8
    fib2 = 2
    next = 0
    while fib1 < maxFib:
	total += fib1
        next = 4*fib1 + fib2
        fib2 = fib1
        fib1 = next

    return total


###############################################################################
# 
# If executed as a script/not imported
#
###############################################################################
if __name__ == '__main__':
    print str(solve(None))
