#!/usr/bin/python

###############################################################################
#
# Project Euler Problem 29
# found online at projecteuler.net/problem=29
# Solution by Timothy Reasa
#
###############################################################################

from math import pow

description = \
'Consider all integer combinations of a^b for 2 <= a <= 5 and\n' + \
'2 <= b <= 5:\n\n' + \
'\t2^2=4, 2^3=8, 2^4=16, 2^5=32\n' + \
'\t3^2=9, 3^3=27, 3^4=81, 3^5=243\n' + \
'\t4^2=16, 4^3=64, 4^4=256, 4^5=1024\n' + \
'\t5^2=25, 5^3=125, 5^4=625, 5^5=3125\n\n' + \
'If they are then placed in numerical order, with any repeats removed,\n' + \
'we get the following sequence of 15 distinct terms:\n\n' + \
'\t4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125\n\n' + \
'How many distinct terms are in the sequence generated by a^b for\n' + \
'2 <= a <= 100 and 2 <= b <= 100?\n'

def display(self):
    return description

# Naive solution so fast that there's no point improving it
def solve(self):
    powers = set()
    for a in range(2, 101):
	for b in range(2, 101):
	    powers.add(int(pow(a, b)))

    return len(powers)


###############################################################################
# 
# If executed as a script/not imported
#
###############################################################################
if __name__ == '__main__':
    print str(solve(None))
